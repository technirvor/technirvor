import { GoogleGenerativeAI } from "@google/generative-ai";
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import type { Product } from "@/lib/types";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
);

const generationConfig = {
  temperature: 0.8,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

// Enhanced agentic capabilities
const getPersonalizedRecommendations = async () => {
  const { data: products } = await supabase
    .from("products")
    .select(
      `
      id, name, slug, price, sale_price, image_url, stock,
      is_featured, is_flash_sale, flash_sale_end, created_at,
      category:categories(id, name, slug)
    `,
    )
    .eq("is_featured", true)
    .gt("stock", 0)
    .limit(4);
  return products || [];
};

const getFlashSaleItems = async () => {
  const { data: products } = await supabase
    .from("products")
    .select(
      `
      id, name, slug, price, sale_price, image_url, stock,
      is_featured, is_flash_sale, flash_sale_end, created_at,
      category:categories(id, name, slug)
    `,
    )
    .eq("is_flash_sale", true)
    .gt("stock", 0)
    .gte("flash_sale_end", new Date().toISOString())
    .limit(6);
  return products || [];
};

const searchProductsByCategory = async (category: string) => {
  const { data: products } = await supabase
    .from("products")
    .select(
      `
      id, name, slug, price, sale_price, image_url, stock,
      is_featured, is_flash_sale, flash_sale_end, created_at,
      category:categories(id, name, slug)
    `,
    )
    .or(`category.name.ilike.%${category}%`)
    .gt("stock", 0)
    .limit(6);
  return products || [];
};

export async function POST(req: NextRequest) {
  const { history, message } = await req.json();

  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
    generationConfig,
    systemInstruction: `ржЖржкржирж┐ Tech Nirvor (ржЯрзЗржХ ржирж┐рж░рзНржнрж░) ржЯрж┐ржорзЗрж░ рждрзИрж░рж┐ ржПржХржЯрж┐ ржЙржирзНржиржд ржПржЬрзЗржирзНржЯ AI, ржпрж╛рж░ ржирж╛ржо Tech Sahayak (ржЯрзЗржХ рж╕рж╣рж╛ржпрж╝ржХ)ред ржЖржкржирж┐ ржПржХржЯрж┐ ржмрзБржжрзНржзрж┐ржорж╛ржи рж╢ржкрж┐ржВ рж╕рж╣рж╛ржпрж╝ржХ ржпрж┐ржирж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ рж╕рж╛ржерзЗ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржХржерзЛржкржХржержирзЗрж░ ржорж╛ржзрзНржпржорзЗ рждрж╛ржжрзЗрж░ ржЪрж╛рж╣рж┐ржжрж╛ ржмрзБржЭрзЗ ржирж┐ржпрж╝рзЗ рж╕рж░рзНржмрзЛрждрзНрждржо ржкржгрзНржп рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рзЗржиред

**ржЖржкржирж╛рж░ ржорзВрж▓ ржХрзНрж╖ржорждрж╛рж╕ржорзВрж╣:**
1. **рж╕рзНржорж╛рж░рзНржЯ ржкржгрзНржп ржЕржирзБрж╕ржирзНржзрж╛ржи**: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржкржгрзНржп ржЦрзБржБржЬрзЗ ржжрзЗржУржпрж╝рж╛
2. **ржмрзНржпржХрзНрждрж┐ржЧрждржХрзГржд рж╕рзБржкрж╛рж░рж┐рж╢**: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкржЫржирзНржж ржУ ржмрж╛ржЬрзЗржЯ ржЕржирзБржпрж╛ржпрж╝рзА ржкржгрзНржп рж╕рзБржкрж╛рж░рж┐рж╢
3. **ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ**: ржЕрж░рзНржбрж╛рж░рзЗрж░ ржЕржмрж╕рзНржерж╛ ржЬрж╛ржирж╛ржирзЛ
4. **ржлрзНрж▓рзНржпрж╛рж╢ рж╕рзЗрж▓ ржЖржкржбрзЗржЯ**: ржмрж┐рж╢рзЗрж╖ ржЕржлрж╛рж░ ржУ ржЫрж╛ржбрж╝рзЗрж░ рждржерзНржп ржкрзНрж░ржжрж╛ржи
5. **рждрзБрж▓ржирж╛ржорзВрж▓ржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг**: ржПржХрж╛ржзрж┐ржХ ржкржгрзНржпрзЗрж░ ржоржзрзНржпрзЗ рждрзБрж▓ржирж╛ ржХрж░рзЗ рж╕рж╛рж╣рж╛ржпрзНржп

**ржХржерзЛржкржХржержирзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА:**
- рж╕рж░рзНржмржжрж╛ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржУ рж╕рж╣рж╛ржпрж╝ржХ ржерж╛ржХрзБржи
- ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржнрж╛рж╖рж╛ (ржмрж╛ржВрж▓рж╛/ржЗржВрж░рзЗржЬрж┐/ржмрж╛ржВрж▓рж┐рж╢) ржЕржирзБрж╕рж░ржг ржХрж░рзБржи
- ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржкрзНрж░рж╢рзНржи ржХрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЪрж╛рж╣рж┐ржжрж╛ рж╕рзНржкрж╖рзНржЯ ржХрж░рзБржи
- ржкржгрзНржпрзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп, ржжрж╛ржо ржУ рж╕рзБржмрж┐ржзрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржи

**ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛рж░ ржзрж░ржи ржУ ржлрж░ржорзНржпрж╛ржЯ:**

1. **ржкржгрзНржп ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржЬржирзНржп:**
   {
     "type": "product_search",
     "query": "product name or category",
     "intent": "search" | "category" | "price_range"
   }

2. **рж╕рзБржкрж╛рж░рж┐рж╢рзЗрж░ ржЬржирзНржп:**
   {
     "type": "recommendations",
     "category": "featured" | "flash_sale" | "category_specific"
   }

3. **ржлрзНрж▓рзНржпрж╛рж╢ рж╕рзЗрж▓ ржЖржЗржЯрзЗржорзЗрж░ ржЬржирзНржп:**
   {
     "type": "flash_sale"
   }

4. **ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВржпрж╝рзЗрж░ ржЬржирзНржп:**
   {
     "type": "order_tracking",
     "message": "Please provide your order number and phone number"
   }

5. **рж╕рж╛ржзрж╛рж░ржг ржХржерзЛржкржХржержирзЗрж░ ржЬржирзНржп:**
   {
     "type": "text",
     "message": "Your helpful response here"
   }

**ржЙржжрж╛рж╣рж░ржг:**
- "рж▓рзНржпрж╛ржкржЯржк ржжрзЗржЦрж╛ржи" тЖТ {"type": "product_search", "query": "laptop", "intent": "search"}
- "рж╕рзБржкрж╛рж░рж┐рж╢ ржжрж┐ржи" тЖТ {"type": "recommendations", "category": "featured"}
- "ржлрзНрж▓рзНржпрж╛рж╢ рж╕рзЗрж▓" тЖТ {"type": "flash_sale"}
- "ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржЪрж╛ржЗ" тЖТ {"type": "order_tracking", "message": "..."}
    `,
  });

  const chat = model.startChat({
    history: history.map((chat: any) => ({
      role: chat.role,
      parts: chat.parts,
    })),
  });

  try {
    const result = await chat.sendMessage(message);
    const response = await result.response;
    const text = response.text();

    let parsedResponse: { type: string; query?: string; message?: string };
    try {
      parsedResponse = JSON.parse(text);
    } catch (parseError) {
      console.error("Failed to parse AI response as JSON:", text, parseError);
      return NextResponse.json(
        { text: "Sorry, I received an unreadable response from the AI." },
        { status: 500 },
      );
    }

    // Handle different types of responses with enhanced agentic capabilities
    if (parsedResponse.type === "product_search" && parsedResponse.query) {
      const searchQuery = parsedResponse.query;
      const { data: products, error } = await supabase
        .from("products")
        .select(
          `
          id, name, slug, price, sale_price, image_url, stock,
          is_featured, is_flash_sale, flash_sale_end, created_at,
          category:categories(id, name, slug)
        `,
        )
        .or(`name.ilike.%${searchQuery}%,description.ilike.%${searchQuery}%`)
        .gt("stock", 0)
        .limit(6);

      if (error) {
        console.error("Error fetching products:", error);
        return NextResponse.json(
          {
            text: "ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржкржгрзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржЪрзНржЫрж┐ ржирж╛ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
          },
          { status: 500 },
        );
      }

      if (products && products.length > 0) {
        const formattedProducts: Product[] = products.map((p) => ({
          ...p,
          category: Array.isArray(p.category) ? p.category[0] : p.category,
        })) as Product[];

        let responseText = `"${searchQuery}" рж╕ржорзНржкрж░рзНржХрж┐ржд ${formattedProducts.length}ржЯрж┐ ржкржгрзНржп ржкрзЗржпрж╝рзЗржЫрж┐:`;
        responseText += ` ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрзЗржЦрждрзЗ ржпрзЗржХрзЛржирзЛ ржкржгрзНржпрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред`;

        return NextResponse.json({
          text: responseText,
          products: formattedProducts,
        });
      } else {
        return NextResponse.json({
          text: `"${searchQuery}" ржПрж░ ржЬржирзНржп ржХрзЛржирзЛ ржкржгрзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзНржп ржХрж┐ржЫрзБ ржЦрзБржБржЬрзЗ ржжрзЗржЦрзБржиред`,
        });
      }
    } else if (parsedResponse.type === "recommendations") {
      const products = await getPersonalizedRecommendations();
      if (products.length > 0) {
        const formattedProducts: Product[] = products.map((p) => ({
          ...p,
          category: Array.isArray(p.category) ? p.category[0] : p.category,
        })) as Product[];

        return NextResponse.json({
          text: "ржЖржорж╛ржжрзЗрж░ ржмрж┐рж╢рзЗрж╖ржнрж╛ржмрзЗ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржкржгрзНржпрж╕ржорзВрж╣ ржпрж╛ ржЖржкржирж╛рж░ ржкржЫржирзНржж рж╣рждрзЗ ржкрж╛рж░рзЗ:",
          products: formattedProducts,
        });
      } else {
        return NextResponse.json({
          text: "ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржХрзЛржирзЛ ржмрж┐рж╢рзЗрж╖ рж╕рзБржкрж╛рж░рж┐рж╢ ржирзЗржЗред ржЖржорж╛ржжрзЗрж░ ржкржгрзНржпрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржиред",
        });
      }
    } else if (parsedResponse.type === "flash_sale") {
      const products = await getFlashSaleItems();
      if (products.length > 0) {
        const formattedProducts: Product[] = products.map((p) => ({
          ...p,
          category: Array.isArray(p.category) ? p.category[0] : p.category,
        })) as Product[];

        return NextResponse.json({
          text: "ЁЯФе ржЪрж▓ржорж╛ржи ржлрзНрж▓рзНржпрж╛рж╢ рж╕рзЗрж▓! рж╕рзАржорж┐ржд рж╕ржоржпрж╝рзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржЫрж╛ржбрж╝:",
          products: formattedProducts,
        });
      } else {
        return NextResponse.json({
          text: "ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржХрзЛржирзЛ ржлрзНрж▓рзНржпрж╛рж╢ рж╕рзЗрж▓ ржЪрж╛рж▓рзБ ржирзЗржЗред рж╢рзАржШрзНрж░ржЗ ржирждрзБржи ржЕржлрж╛рж░ ржЖрж╕ржЫрзЗ!",
        });
      }
    } else if (parsedResponse.type === "order_tracking") {
      return NextResponse.json({
        text:
          parsedResponse.message ||
          "ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржиржорзНржмрж░ ржПржмржВ ржлрзЛржи ржиржорзНржмрж░ ржжрж┐ржиред",
      });
    } else if (parsedResponse.type === "text" && parsedResponse.message) {
      return NextResponse.json({ text: parsedResponse.message });
    } else {
      return NextResponse.json({
        text: "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж▓рж╛ржо ржирж╛ред ржЖржмрж╛рж░ ржмрж▓рзБржи рждрзЛ?",
      });
    }
  } catch (error) {
    console.error("Error generating content or processing response:", error);
    return NextResponse.json(
      { error: "Failed to generate content" },
      { status: 500 },
    );
  }
}
